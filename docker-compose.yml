services:
  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: discovery-server
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 120s
    networks:
      - healthyme-network
    restart: on-failure

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    depends_on:
      - discovery-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 120s
    networks:
      - healthyme-network
    restart: on-failure

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - discovery-server
      - config-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 120s
    networks:
      - healthyme-network
    restart: on-failure

  mysql:
    image: mysql:8.0
    container_name: mysql_container
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: j0s33nr1qu3
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - healthyme-network
    restart: on-failure
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=100

  mongo-citas:
    image: mongo:4.4
    container_name: mongo-citas
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: healthyme_citas
    volumes:
      - mongo_citas_data:/data/db
    networks:
      - healthyme-network
    restart: on-failure

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.15
    platform: linux/amd64
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 24
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - healthyme-network
    restart: on-failure

  kafka:
    image: confluentinc/cp-kafka:7.2.15
    platform: linux/amd64
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - healthyme-network
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:29092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  security-service:
    build:
      context: ./security-service
      dockerfile: Dockerfile
    container_name: security-service
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - discovery-server
      - config-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 90s
      timeout: 30s
      retries: 3
      start_period: 180s
    networks:
      - healthyme-network
    restart: no

  healthyme-pacientes:
    build:
      context: ./healthyme-pacientes
      dockerfile: Dockerfile
    container_name: healthyme-pacientes
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - discovery-server
      - config-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 90s
      timeout: 30s
      retries: 3
      start_period: 180s
    networks:
      - healthyme-network
    restart: no

  healthyme-personal:
    build:
      context: ./healthyme-personal
      dockerfile: Dockerfile
    container_name: healthyme-personal
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - discovery-server
      - config-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 90s
      timeout: 30s
      retries: 3
      start_period: 180s
    networks:
      - healthyme-network
    restart: no

  healthyme-notification:
    build:
      context: ./healthyme-notification
      dockerfile: Dockerfile
    container_name: healthyme-notification
    ports:
      - "8090:8090"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - discovery-server
      - config-server
      - kafka
    volumes:
      - ./healthyme-notification/src/main/resources/templates:/app/templates:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 90s
      timeout: 30s
      retries: 3
      start_period: 180s
    networks:
      - healthyme-network
    restart: no

  healthyme-laboratorio:
    build:
      context: ./healthyme-laboratorio
      dockerfile: Dockerfile
    container_name: healthyme-laboratorio
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - discovery-server
      - config-server
    volumes:
      - ./healthyme-laboratorio/src/main/resources/Templates:/app/templates:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 90s
      timeout: 30s
      retries: 3
      start_period: 180s
    networks:
      - healthyme-network
    restart: no

  healthyme-consultas:
    build:
      context: ./healthyme-consultas
      dockerfile: Dockerfile
    container_name: healthyme-consultas
    ports:
      - "8089:8089"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - discovery-server
      - config-server
    volumes:
      - ./healthyme-consultas/src/main/resources/templates:/app/templates:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/actuator/health"]
      interval: 90s
      timeout: 30s
      retries: 3
      start_period: 180s
    networks:
      - healthyme-network
    restart: no

  healthyme-storage:
    build:
      context: ./healthyme-storage
      dockerfile: Dockerfile
    container_name: healthyme-storage
    ports:
      - "8088:8088"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - discovery-server
      - config-server
    volumes:
      - ./storage:/app/storage/files
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/actuator/health"]
      interval: 90s
      timeout: 30s
      retries: 3
      start_period: 180s
    networks:
      - healthyme-network
    restart: no

  healthyme-reclamaciones:
    build:
      context: ./healthyme-reclamaciones
      dockerfile: Dockerfile
    container_name: healthyme-reclamaciones
    ports:
      - "8091:8091"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - discovery-server
      - config-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/actuator/health"]
      interval: 90s
      timeout: 30s
      retries: 3
      start_period: 180s
    networks:
      - healthyme-network
    restart: no

  healthyme-infraestructura:
    build:
      context: ./healthyme-infraestructura
      dockerfile: Dockerfile
    container_name: healthyme-infraestructura
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - discovery-server
      - config-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 90s
      timeout: 30s
      retries: 3
      start_period: 180s
    networks:
      - healthyme-network
    restart: no

  healthyme-citas:
    build:
      context: ./healthyme-citas
      dockerfile: Dockerfile
    container_name: healthyme-citas
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - discovery-server
      - config-server
      - mongo-citas
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 90s
      timeout: 30s
      retries: 3
      start_period: 180s
    networks:
      - healthyme-network
    restart: no

  healthyme-payment:
    build:
      context: ./healthyme-payment
      dockerfile: Dockerfile
    container_name: healthyme-payment
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - discovery-server
      - config-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 90s
      timeout: 30s
      retries: 3
      start_period: 180s
    networks:
      - healthyme-network
    restart: no

volumes:
  mysql_data:
  mongo_citas_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:

networks:
  healthyme-network:
    driver: bridge
